#!/usr/bin/env node
/* vim:set ft=javascript ts=8 sw=4 tw=0 : */

/*
 * nodelint -- a command line JSLint runner under node.js
 *
 * Released into the Public Domain by tav <tav@espians.com>
 * See the README.md for full credits of the awesome contributors!
 */

/*global JSLINT, options */
/*jslint evil: true */

(function () {
  var
    f = require('file'),
    fs = require('fs'),
    path = require('path'),
    util = require('util'),
    SCRIPT_DIRECTORY,
    DEFAULT_CONFIG_FILE,
    params,
    files,
    config_file,
    config_param_found,
    reporter_file = 'default',
    reporter_param_found,
    builtin_reporters = require(__dirname + '/lib/reporters'),
    reporter,
    usage =
    "Usage: nodelint file.js [file2 file3 ...] [options]\n" +
    "Options:\n\n" +
    "  --config FILE     the path to a config.js file with JSLINT options\n" +
    "  --reporter FILE   optional path to a reporter.js file to customize the output\n" +
    "  --list-reporters  list available build-in reporters\n" +
    "  -h, --help        display this help and exit\n" +
    "  -v, --version     output version information and exit";

// -----------------------------------------------------------------------------
// load jslint itself and set the path to the default config file
// -----------------------------------------------------------------------------

  SCRIPT_DIRECTORY = path.dirname(fs.realpathSync(__filename));
  DEFAULT_CONFIG_FILE = path.join(SCRIPT_DIRECTORY, 'config.js');

  eval(fs.readFileSync(path.join(SCRIPT_DIRECTORY, 'jslint/jslint.js'), 'utf8'));

// -----------------------------------------------------------------------------
// skript main funktion
// -----------------------------------------------------------------------------

  function lint(files, default_config_file, config_file, reporter) {
    var
      retval = 0,
      results = [],
      option_name,
      real_options;

    if (!files.length) {
      util.puts(usage);
      return 1;
    }

    eval(fs.readFileSync(default_config_file, 'utf8'));

    if (typeof options === 'undefined') {
      util.puts("Error: there's no `options` variable in the default config file.");
      return 1;
    }

    real_options = options;

    if (typeof config_file !== 'undefined') {
      eval(fs.readFileSync(config_file, 'utf8'));

      if (typeof options === 'undefined') {
        util.puts("Error: there's no `options` variable in the config file.");
        return 1;
      }

      for (option_name in options) {
        if (options.hasOwnProperty(option_name)) {
          real_options[option_name] = options[option_name];
        }
      }
    }

    files.forEach(function (file) {
      var
        source,
        i,
        error,
        // Quite enougth config clone, may be improved in future
        current_file_options = JSON.parse(JSON.stringify(real_options));

      try {
        source = fs.readFileSync(file, 'utf8');
      } catch (err) {
        util.puts("Error: Opening file <" + file + ">");
        util.puts(err + '\n');
        retval = 1;
        return;
      }

      // remove any shebangs
      source = source.replace(/^\#\!.*/, '');

      if (!JSLINT(source, current_file_options)) {
        for (i = 0; i < JSLINT.errors.length; i += 1) {
          error = JSLINT.errors[i];
          if (error) {
            results.push({file: file, error: error});
          }
        }
        retval = 2;
      }
    });

    reporter.report(results, real_options);

    return retval;
  }

// -----------------------------------------------------------------------------
// run the file as a script if called directly, i.e. not imported via require()
// -----------------------------------------------------------------------------

  params = process.argv.splice(2);
  files = [];

  // a very basic pseudo --options parser
  params.forEach(function (param) {
    var content, pkg, stat, reporter_file_for_forin_loop;
    if (param.slice(0, 9) === "--config=") {
      config_file = param.slice(9);
    } else if (param === '--config') {
      config_param_found = true;
    } else if (config_param_found) {
      config_file = param;
      config_param_found = false;
    } else if (param.slice(0, 11) === "--reporter=") {
      reporter_file = param.slice(11);
    } else if (param === '--reporter') {
      reporter_param_found = true;
    } else if (reporter_param_found) {
      reporter_file = param;
      reporter_param_found = false;
    } else if (param === '--list-reporters') {
      util.puts('Build-in reporters: ');
      for (reporter_file_for_forin_loop in builtin_reporters) {
        if (builtin_reporters.hasOwnProperty(reporter_file_for_forin_loop)) {
          if (builtin_reporters[reporter_file_for_forin_loop].info) {
            util.puts('  * ' + reporter_file_for_forin_loop
                    + ': ' + builtin_reporters[reporter_file_for_forin_loop].info);
          } else {
            util.puts('  * ' + reporter_file_for_forin_loop);
          }
        }
      }
      process.exit(0);
    } else if ((param === '--version') || (param === '-v')) {
      content = fs.readFileSync(path.join(SCRIPT_DIRECTORY, 'package.json'), 'utf8');
      pkg = JSON.parse(content);
      util.puts(pkg.version);
      process.exit(0);
    } else if ((param === '--help') || (param === '-h')) {
      util.puts(usage);
      process.exit(0);
    } else {
      stat = fs.statSync(param);
      if (stat.isDirectory()) {
        f.walkSync(param, function (base, dirs, names) {
          names.forEach(function (name) {
            if (name.match(/.js$/)) {
              files.push(path.join(base, name));
            }
          });
        });
      } else {
        files.push(param);
      }
    }
  });

  // Get reporter by name or by file
  if (builtin_reporters.hasOwnProperty(reporter_file)) {
    reporter = builtin_reporters[reporter_file];
  } else {
    reporter = require(reporter_file);
  }

  process.exit(lint(files, DEFAULT_CONFIG_FILE, config_file, reporter));

}());

